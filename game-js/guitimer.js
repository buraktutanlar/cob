// Generated by CoffeeScript 1.6.2
(function() {
  var __slice = [].slice;

  window.GuiTimer = (function() {
    function GuiTimer() {
      var args;

      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      this.gui = (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args);
        return Object(result) === result ? result : child;
      })(Gui, args, function(){});
      this.queue = [];
      this.cmds = {
        pick: 1,
        drop: 2,
        moveLeft: 3,
        moveRight: 4
      };
    }

    GuiTimer.prototype.setLevel = function(mapData) {
      return this.gui.setLevel(mapData);
    };

    GuiTimer.prototype.setBotPos = function(col) {
      this.gui.setBotPos(col);
      return this.queue = [];
    };

    GuiTimer.prototype.getBot = function() {
      return this.gui.bot;
    };

    GuiTimer.prototype.draw = function() {
      return this.gui.draw();
    };

    GuiTimer.prototype._runNextCmd = function() {
      var cmd;

      if (this.queue.length !== 0) {
        cmd = this.queue[0];
        this.queue = this.queue.slice(1);
        switch (cmd) {
          case this.cmds.pick:
            this.gui.pick();
            break;
          case this.cmds.drop:
            this.gui.drop();
            break;
          case this.cmds.moveLeft:
            this.gui.moveLeft();
            break;
          case this.cmds.moveRight:
            this.gui.moveRight();
        }
        return true;
      }
      return false;
    };

    GuiTimer.prototype.step = function() {
      this.gui._forceUpdate();
      return this._runNextCmd();
    };

    GuiTimer.prototype.update = function(dt) {
      this.gui.update(dt);
      if (!this.gui.isBusy()) {
        return this._runNextCmd();
      }
    };

    GuiTimer.prototype._forceUpdate = function() {
      return this.gui._forceUpdate();
    };

    GuiTimer.prototype.pick = function(fastForward) {
      if (fastForward) {
        this._forceUpdate();
      }
      return this.queue.push(this.cmds.pick);
    };

    GuiTimer.prototype.drop = function(fastForward) {
      if (fastForward) {
        this._forceUpdate();
      }
      return this.queue.push(this.cmds.drop);
    };

    GuiTimer.prototype.moveLeft = function(fastForward) {
      if (fastForward) {
        this._forceUpdate();
      }
      return this.queue.push(this.cmds.moveLeft);
    };

    GuiTimer.prototype.moveRight = function(fastForward) {
      if (fastForward) {
        this._forceUpdate();
      }
      return this.queue.push(this.cmds.moveRight);
    };

    return GuiTimer;

  })();

}).call(this);

/*
//@ sourceMappingURL=guitimer.map
*/
