// Generated by CoffeeScript 1.6.3
(function() {
  var GuiModule,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  GuiModule = (function() {
    var Block, Bot, Gui;
    Bot = (function() {
      function Bot(gui, posx, posy, speed) {
        this.gui = gui;
        this.posx = posx;
        this.posy = posy;
        this.speed = speed != null ? speed : 1.5;
        this.targetx = this.posx;
        this.targety = this.posy;
        this.busy = false;
        this.attachedTo = null;
        this.onComplete = function() {};
      }

      Bot.prototype.bottomPos = function() {
        return [this.posx, this.posy + 0.5];
      };

      Bot.prototype.moveDelta = function(x, y) {
        this.targetx = this.posx + x;
        return this.targety = this.posy + y;
      };

      Bot.prototype.moveTo = function(x, y) {
        this.targetx = x;
        return this.targety = y;
      };

      Bot.prototype.attach = function(obj) {
        this.attachedTo = obj;
        return obj.attach(this);
      };

      Bot.prototype.remove = function() {
        this.attachedTo.remove();
        return this.attachedTo = null;
      };

      Bot.prototype.draw = function() {
        this.gui.graphics.setColor(255, 255, 255);
        fillRect(this.gui, this.posx, this.posy);
        if (this.attachedTo) {
          return this.attachedTo.draw();
        }
      };

      Bot.prototype.update = function(dt) {
        var delta;
        delta = dt * this.speed;
        if (this.targetx < this.posx) {
          if (this.targetx > this.posx - delta) {
            this.posx = this.targetx;
          } else {
            this.posx -= delta;
          }
        } else if (this.targetx > this.posx) {
          if (this.targetx < this.pox + delta) {
            this.posx = this.targetx;
          } else {
            this.posx += delta;
          }
        } else if (this.targety < this.posy) {
          if (this.targety > this.posy - delta) {
            this.posy = this.targety;
          } else {
            this.posy -= delta;
          }
        } else if (this.targety > this.posy) {
          if (this.targety < this.posy + delta) {
            this.posy = this.targety;
          } else {
            this.posy += delta;
          }
        }
        if (this.attachedTo) {
          this.attachedTo.update(dt);
        }
        if (this.targetx === this.posx && this.targety === this.posy) {
          return this.onComplete();
        } else {
          return this.busy = true;
        }
      };

      Bot.prototype._forceUpdate = function() {
        var _results;
        _results = [];
        while (this.posx !== this.targetx || this.posy !== this.targety) {
          this.posx = this.targetx;
          this.posy = this.targety;
          if (this.attachedTo) {
            this.attachedTo.setPosRelative();
          }
          _results.push(this.onComplete());
        }
        return _results;
      };

      return Bot;

    })();
    Block = (function() {
      function Block(gui, posx, posy, color) {
        this.gui = gui;
        this.posx = posx;
        this.posy = posy;
        this.color = color;
        this.remove = __bind(this.remove, this);
        this.attached = null;
      }

      Block.prototype.draw = function() {
        var _ref;
        (_ref = this.gui.graphics).setColor.apply(_ref, this.color);
        return fillRect(this.gui, this.posx, this.posy);
      };

      Block.prototype.setPosRelative = function() {
        var bottomx, bottomy, _ref;
        if (this.attached) {
          _ref = this.attached.bottomPos(), bottomx = _ref[0], bottomy = _ref[1];
          this.posx = bottomx;
          return this.posy = bottomy + 0.5;
        }
      };

      Block.prototype.update = function(dt) {
        return this.setPosRelative();
      };

      Block.prototype.attach = function(obj) {
        return this.attached = obj;
      };

      Block.prototype.remove = function() {
        return this.attached = null;
      };

      return Block;

    })();
    Gui = (function() {
      function Gui(internal, maxBlockHeight, botSpeed, drawBot) {
        this.internal = internal;
        this.maxBlockHeight = maxBlockHeight;
        this.botSpeed = botSpeed;
        this.drawBot = drawBot != null ? drawBot : true;
        this.pick = __bind(this.pick, this);
        this.map = [];
      }

      Gui.prototype.setLevel = function(mapData) {
        var block, col, colIdx, color, newCol, posx, posy, row, rowIdx, _i, _j, _ref, _ref1;
        this.map = [];
        for (colIdx = _i = 0, _ref = mapData.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; colIdx = 0 <= _ref ? ++_i : --_i) {
          col = mapData[colIdx];
          newCol = [];
          if (col.length !== 0) {
            for (rowIdx = _j = 0, _ref1 = col.length - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; rowIdx = 0 <= _ref1 ? ++_j : --_j) {
              row = col[rowIdx];
              if (row === null) {
                break;
              } else {
                color = row === "red" ? [255, 0, 0] : row === "green" ? [0, 255, 0] : row === "blue" ? [0, 0, 255] : row === "yellow" ? [249, 246, 49] : [255, 234, 173];
                posx = colIdx;
                posy = this.maxBlockHeight - rowIdx - 1;
                block = new Block(this.internal, posx, posy, color);
                newCol.push(block);
              }
            }
          }
          this.map.push(newCol);
        }
        if (this.drawBot) {
          this.bot = new Bot(this.internal, Math.floor(this.map.length / 2), 0, this.botSpeed);
        }
        console.log(this.bot);
        return console.log(this.map);
      };

      Gui.prototype.setBotPos = function(col) {
        if (this.bot) {
          this.bot.posx = col;
          this.bot.targetx = col;
          this.bot.targety = 0;
          this.bot.posy = 0;
          return this.bot._forceUpdate();
        }
      };

      Gui.prototype.isBusy = function() {
        return this.bot.busy;
      };

      Gui.prototype.draw = function() {
        var col, mapWidth, row, _i, _j, _len, _len1, _ref;
        this.internal.graphics.setColor("15BDBA");
        mapWidth = this.map.length * this.internal.BLOCK_WIDTH;
        this.internal.graphics.translate((this.internal.graphics.getWidth() - mapWidth) / 2, 0);
        this.internal.graphics.line(0, 0, 0, this.internal.graphics.getHeight());
        this.internal.graphics.line(mapWidth + this.internal.BLOCK_MARGIN, 0, mapWidth + this.internal.BLOCK_MARGIN, this.internal.graphics.getHeight());
        _ref = this.map;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          col = _ref[_i];
          for (_j = 0, _len1 = col.length; _j < _len1; _j++) {
            row = col[_j];
            row.draw();
          }
        }
        if (this.drawBot) {
          return this.bot.draw();
        }
      };

      Gui.prototype.update = function(dt) {
        var col, row, _i, _j, _len, _len1, _ref;
        _ref = this.map;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          col = _ref[_i];
          for (_j = 0, _len1 = col.length; _j < _len1; _j++) {
            row = col[_j];
            row.update(dt);
          }
        }
        if (this.drawBot) {
          return this.bot.update(dt);
        }
      };

      Gui.prototype._forceUpdate = function() {
        return this.bot._forceUpdate();
      };

      Gui.prototype.pick = function() {
        var col,
          _this = this;
        this._forceUpdate();
        col = colOf(this.bot.posx);
        this.bot.moveTo(this.bot.posx, this.maxBlockHeight - this.map[col].length - 1);
        return this.bot.onComplete = function() {
          _this.bot.attach(_this.map[col].pop());
          _this.bot.moveTo(_this.bot.posx, 0);
          return _this.bot.onComplete = function() {
            return _this.bot.onComplete = function() {
              return this.busy = false;
            };
          };
        };
      };

      Gui.prototype.drop = function() {
        var col,
          _this = this;
        this._forceUpdate();
        col = colOf(this.bot.posx);
        this.bot.moveDelta(0, this.maxBlockHeight - this.map[col].length - 2);
        return this.bot.onComplete = function() {
          _this.map[col].push(_this.bot.attachedTo);
          _this.bot.remove();
          _this.bot.moveTo(_this.bot.posx, 0);
          return _this.bot.onComplete = function() {
            return _this.bot.onComplete = function() {
              return this.busy = false;
            };
          };
        };
      };

      Gui.prototype.moveLeft = function() {
        var _this = this;
        this._forceUpdate();
        this.bot.moveDelta(-1, 0);
        return this.bot.onComplete = function() {
          return _this.bot.onComplete = function() {
            return this.busy = false;
          };
        };
      };

      Gui.prototype.moveRight = function() {
        var _this = this;
        this._forceUpdate();
        this.bot.moveDelta(1, 0);
        return this.bot.onComplete = function() {
          return _this.bot.onComplete = function() {
            return this.busy = false;
          };
        };
      };

      return Gui;

    })();
    return {
      Gui: Gui
    };
  })();

  window.Gui = GuiModule.Gui;

}).call(this);

/*
//@ sourceMappingURL=gui.map
*/
